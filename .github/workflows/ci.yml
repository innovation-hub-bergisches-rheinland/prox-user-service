name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  JAVA_VERSION: 17
  NODE_VERSION: 16.x

jobs:
  # Basic Gradle wrapper validation. This step is run first, due to security
  # concerns. Running our whole pipeline with Gradle with a corrupt wrapper,
  # could expose our secrets, and we definitely want to prevent this.
  validation:
    name: Gradle wrapper validation

    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

  assemble:
    name: Build

    runs-on: ubuntu-latest
    needs: [ validation ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Gradle Assemble
        run: |
          ./gradlew --stacktrace assemble

  test:

    runs-on: ubuntu-latest
    needs: [ validation ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Gradle test
        run: |
          ./gradlew --stacktrace test

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: build reports
          path: build/reports

  codestyle:

    runs-on: ubuntu-latest
    needs: [ validation ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Gradle Codestyle Check
        run: |
          ./gradlew --stacktrace spotlessCheck

  sonarcloud:
    name: SonarCloud analysis

    runs-on: ubuntu-latest
    needs: [ validation, assemble, test ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          # Sonar needs the whole Git history for issue assignment
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Cache SonarCloud results
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache/
          key: ubuntu-sonar

      - name: SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew jacocoTestReport sonarqube --stacktrace -i

  build-image:
    name: Build Docker Image

    runs-on: ubuntu-latest
    needs: [ validation, assemble, test ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Jib Docker Build
        run: ./gradlew --stacktrace jibDockerBuild

  release:
    name: Release

    # Only run if a tag is created
    if: startsWith(github.ref, 'refs/tags/v')

    needs: [ validation, build-image ]

    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          # Shipkit needs the whole Git history for changelog generation
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: 'gradle'

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_IO_USERNAME }}
          password: ${{ secrets.QUAY_IO_PASSWORD }}

      - name: Jib Docker Build and push
        run: ./gradlew --stacktrace jib