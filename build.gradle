plugins {
	id 'com.diffplug.spotless' version '6.0.0'
	id 'com.github.node-gradle.node' version '3.1.1'
	// Provides task metadata and dependency information
	id 'org.barfuin.gradle.taskinfo' version '1.3.1'
	id 'org.sonarqube' version '3.3'
	// id "io.freefair.lombok" version "6.3.0"
	id 'jacoco'
}

ext {
	version = file('version.txt').text.trim()
}

allprojects {
	apply plugin: "java"
//	apply plugin: "io.freefair.lombok"

	repositories {
		mavenLocal()
		mavenCentral()
	}

	ext {
		javaxCDIVersion = "2.0"
		apacheCommonsVersion = "3.11"
		mapstructVersion = "1.4.2.Final"
		assertJVersion = "3.21.0"
		junitVersion = "5.8.2";
	}

	dependencies {
		implementation("javax.enterprise:cdi-api:${javaxCDIVersion}")
		implementation("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
		testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
		testImplementation("org.assertj:assertj-core:${assertJVersion}")
		testImplementation "org.mockito:mockito-core:3.+"
		compileOnly 'org.projectlombok:lombok:1.18.22'
		annotationProcessor 'org.projectlombok:lombok:1.18.22'

		testCompileOnly 'org.projectlombok:lombok:1.18.22'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
	}

	group = "de.innovationhub.prox.userservice"
	version = "${version}"

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
	}

	compileJava {
		options.encoding = "UTF-8"
		options.compilerArgs << "-parameters"
	}

	compileTestJava {
		options.encoding = "UTF-8"
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacocoTestReport {
		reports {
			xml.required = true
		}
		dependsOn test
	}
}


node {
	download = true

	version = '16.13.0'

	npmInstallCommand = "ci"
}

spotless {
	ratchetFrom 'origin/main'
	encoding 'UTF-8'

	freshmark {
		target '*.md'
	}
	java {
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()

		googleJavaFormat('1.13.0')
	}
	groovyGradle {
		target '*.gradle'
		greclipse('4.21.0')
	}
	format 'styling', {
		target '*.js', '*.ts', '*.css', '*.scss', '*.json', '*.md', '*.html', '*.yml', '*.yaml', '*.sql'
		prettier('2.5.0').config([
			'tabWidth': 2
		])
	}
}

tasks.named('sonarqube').configure {
	dependsOn test
}

sonarqube {
	properties {
		property "sonar.projectKey", "innovation-hub-bergisches-rheinland_prox-user-service"
		property "sonar.organization", "innovation-hub-bergisches-rheinland"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

defaultTasks 'spotlessApply', 'build'
